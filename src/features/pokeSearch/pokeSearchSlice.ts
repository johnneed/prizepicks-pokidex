import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "../../app/store";
import { Pokemon } from "pokenode-ts";
import { getPokemonByName } from "./pokeSerchAPI";

export interface PokeSearchState {
    history: Pokemon[];
    status: "idle" | "loading" | "failed";
    searchHistoryIndex: number;
}

const initialState: PokeSearchState = {
    history: [],
    status: "idle",
    searchHistoryIndex: 0
};

export const searchPokemons = createAsyncThunk(
    "pokeSearch/getPokemonByName",
    async (name: string) => {
        const response = await getPokemonByName(name);
        return response;
    }
);
export const pokeSearchSlice = createSlice({
    name: "pokeSearch",
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        setSearchHistoryIndex: (state, action: PayloadAction<number>) => {
            state.searchHistoryIndex = action.payload;
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(searchPokemons.pending, (state) => {
                state.status = "loading";
            })
            .addCase(searchPokemons.fulfilled, (state, action) => {
                state.status = "idle";
                state.history = [action.payload, ...state.history];
                state.searchHistoryIndex = 0;
            })
            .addCase(searchPokemons.rejected, (state) => {
                state.status = "failed";
            });
    }
});
export const selectHistory = (state: RootState) => state.pokeSearch.history;
export const selectHistoryIndex = (state: RootState) => state.pokeSearch.searchHistoryIndex;

export const selectSearchStatus = (state: RootState) => state.pokeSearch.status;
export const { setSearchHistoryIndex } = pokeSearchSlice.actions;
export default pokeSearchSlice.reducer;
